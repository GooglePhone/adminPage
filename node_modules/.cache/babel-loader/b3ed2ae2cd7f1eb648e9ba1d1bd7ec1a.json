{"ast":null,"code":"import SockJS from 'sockjs-client/dist/sockjs.min.js';\nimport Stomp from 'webstomp-client';\nimport { wsStore } from './wsStore'; // const websocketUrl = `wss://demo.piesocket.com/v3/channel_1?api_key=VCXCEuvhGcBDP7XhiJJUDvR1e1D3eiVjgZ9VRiaV&notify_self`;\n// const websocketUrl = `ws://127.0.0.1:8080/`\n// import { useStore } from 'vuex'\n\nimport { onMounted } from 'vue';\nexport default {\n  name: 'websocket',\n\n  setup() {\n    // const store = useStore()\n    onMounted(() => {\n      const websocket = {\n        data() {\n          return {\n            ws: null\n          };\n        },\n\n        created() {\n          //頁面剛進入時開啟長連線\n          this.initWebsocket();\n        },\n\n        destroyed: function () {\n          //頁面銷燬時關閉長連線\n          this.websocketclose();\n        },\n        methods: {\n          //初始websocket\n          initWebsocket() {\n            this.socket = new SockJS('http://localhost:8080/ws');\n            this.stompClient = Stomp.over(this.socket);\n            this.stompClient.connect( // headers头部信息。可添加客户端的认证信息。也可以不添加信息，headers 直接就设置为 {}\n            header => {\n              header;\n            }, frame => {\n              websocket.data().ws = this;\n              console.log(frame);\n              this.stompClient.subscribe('/topic/bind', function (data) {\n                let orderList = [];\n\n                if (wsStore.currentOrder.value !== undefined) {\n                  orderList = wsStore.currentOrder.value.data;\n                }\n\n                const currentData = JSON.parse(data.body);\n                let exists = false;\n                orderList.forEach(element => {\n                  if (element.orderId === currentData.orderId) {\n                    element.data.concat(currentData.data);\n                    exists = true;\n                  }\n                });\n\n                if (!exists) {\n                  orderList.push(currentData);\n                }\n\n                wsStore.currentOrder.value = orderList;\n                console.log(wsStore.currentOrder.value); // console.log('ddd' + data)\n              });\n              this.stompClient.send('/app/testMsg', {}, JSON.stringify({\n                clientId: 'jjj'\n              })); //   this.connectSucceed()\n            }, err => {\n              this.initWebsocket; // 连接失败的回调\n\n              console.log(err); //   this.reconnect(this.socketUrl, this.connectSucceed)\n            });\n          }\n\n        }\n      };\n    });\n  }\n\n}; // export const websocket = {\n//   data() {\n//     return {\n//       ws: null,\n//     }\n//   },\n//   created() {\n//     //頁面剛進入時開啟長連線\n//     this.initWebsocket()\n//   },\n//   destroyed: function () {\n//     //頁面銷燬時關閉長連線\n//     this.websocketclose()\n//   },\n//   methods: {\n//     //初始websocket\n//     initWebsocket() {\n//       this.socket = new SockJS('http://localhost:8080/ws')\n//       this.stompClient = Stomp.over(this.socket)\n//       this.stompClient.connect(\n//         // headers头部信息。可添加客户端的认证信息。也可以不添加信息，headers 直接就设置为 {}\n//         (header) => {\n//           header\n//         },\n//         (frame) => {\n//           websocket.data().ws = this\n//           console.log(frame)\n//           this.stompClient.subscribe('/topic/bind', function (data) {\n//             let orderList = []\n//             if (wsStore.currentOrder.value !== undefined) {\n//               orderList = wsStore.currentOrder.value.data\n//             }\n//             const currentData = JSON.parse(data.body)\n//             let exists = false\n//             orderList.forEach((element) => {\n//               if (element.orderId === currentData.orderId) {\n//                 element.data.concat(currentData.data)\n//                 exists = true\n//               }\n//             })\n//             if (!exists) {\n//               orderList.push(currentData)\n//             }\n//             wsStore.currentOrder.value = orderList\n//             console.log(wsStore.currentOrder.value)\n//             // console.log('ddd' + data)\n//           })\n//           this.stompClient.send(\n//             '/app/testMsg',\n//             {},\n//             JSON.stringify({ clientId: 'jjj' }),\n//           )\n//           //   this.connectSucceed()\n//         },\n//         (err) => {\n//           this.initWebsocket\n//           // 连接失败的回调\n//           console.log(err)\n//           //   this.reconnect(this.socketUrl, this.connectSucceed)\n//         },\n//       )\n//     },\n//   },\n// }","map":{"version":3,"names":["SockJS","Stomp","wsStore","onMounted","name","setup","websocket","data","ws","created","initWebsocket","destroyed","websocketclose","methods","socket","stompClient","over","connect","header","frame","console","log","subscribe","orderList","currentOrder","value","undefined","currentData","JSON","parse","body","exists","forEach","element","orderId","concat","push","send","stringify","clientId","err"],"sources":["C:/Users/user/Desktop/admin/coreui-free-vue-admin-template-main/coreui-free-vue-admin-template-main/src/websocket.js"],"sourcesContent":["import SockJS from 'sockjs-client/dist/sockjs.min.js'\nimport Stomp from 'webstomp-client'\nimport { wsStore } from './wsStore'\n// const websocketUrl = `wss://demo.piesocket.com/v3/channel_1?api_key=VCXCEuvhGcBDP7XhiJJUDvR1e1D3eiVjgZ9VRiaV&notify_self`;\n// const websocketUrl = `ws://127.0.0.1:8080/`\n// import { useStore } from 'vuex'\nimport { onMounted } from 'vue'\nexport default {\n  name: 'websocket',\n  setup() {\n    // const store = useStore()\n    onMounted(() => {\n     const websocket = {\n        data() {\n          return {\n            ws: null,\n          }\n        },\n        created() {\n          //頁面剛進入時開啟長連線\n          this.initWebsocket()\n        },\n        destroyed: function () {\n          //頁面銷燬時關閉長連線\n          this.websocketclose()\n        },\n        methods: {\n          //初始websocket\n          initWebsocket() {\n            this.socket = new SockJS('http://localhost:8080/ws')\n            this.stompClient = Stomp.over(this.socket)\n            this.stompClient.connect(\n              // headers头部信息。可添加客户端的认证信息。也可以不添加信息，headers 直接就设置为 {}\n              (header) => {\n                header\n              },\n              (frame) => {\n                websocket.data().ws = this\n                console.log(frame)\n                this.stompClient.subscribe('/topic/bind', function (data) {\n                  let orderList = []\n                  if (wsStore.currentOrder.value !== undefined) {\n                    orderList = wsStore.currentOrder.value.data\n                  }\n                  const currentData = JSON.parse(data.body)\n                  let exists = false\n                  orderList.forEach((element) => {\n                    if (element.orderId === currentData.orderId) {\n                      element.data.concat(currentData.data)\n                      exists = true\n                    }\n                  })\n                  if (!exists) {\n                    orderList.push(currentData)\n                  }\n                  wsStore.currentOrder.value = orderList\n                  console.log(wsStore.currentOrder.value)\n                  // console.log('ddd' + data)\n                })\n                this.stompClient.send(\n                  '/app/testMsg',\n                  {},\n                  JSON.stringify({ clientId: 'jjj' }),\n                )\n                //   this.connectSucceed()\n              },\n              (err) => {\n                this.initWebsocket\n                // 连接失败的回调\n                console.log(err)\n                //   this.reconnect(this.socketUrl, this.connectSucceed)\n              },\n            )\n          },\n        },\n      }\n    })\n  },\n}\n\n// export const websocket = {\n//   data() {\n//     return {\n//       ws: null,\n//     }\n//   },\n//   created() {\n//     //頁面剛進入時開啟長連線\n//     this.initWebsocket()\n//   },\n//   destroyed: function () {\n//     //頁面銷燬時關閉長連線\n//     this.websocketclose()\n//   },\n//   methods: {\n//     //初始websocket\n//     initWebsocket() {\n//       this.socket = new SockJS('http://localhost:8080/ws')\n//       this.stompClient = Stomp.over(this.socket)\n//       this.stompClient.connect(\n//         // headers头部信息。可添加客户端的认证信息。也可以不添加信息，headers 直接就设置为 {}\n//         (header) => {\n//           header\n//         },\n//         (frame) => {\n//           websocket.data().ws = this\n//           console.log(frame)\n//           this.stompClient.subscribe('/topic/bind', function (data) {\n//             let orderList = []\n//             if (wsStore.currentOrder.value !== undefined) {\n//               orderList = wsStore.currentOrder.value.data\n//             }\n//             const currentData = JSON.parse(data.body)\n//             let exists = false\n//             orderList.forEach((element) => {\n//               if (element.orderId === currentData.orderId) {\n//                 element.data.concat(currentData.data)\n//                 exists = true\n//               }\n//             })\n//             if (!exists) {\n//               orderList.push(currentData)\n//             }\n//             wsStore.currentOrder.value = orderList\n//             console.log(wsStore.currentOrder.value)\n//             // console.log('ddd' + data)\n//           })\n//           this.stompClient.send(\n//             '/app/testMsg',\n//             {},\n//             JSON.stringify({ clientId: 'jjj' }),\n//           )\n//           //   this.connectSucceed()\n//         },\n//         (err) => {\n//           this.initWebsocket\n//           // 连接失败的回调\n//           console.log(err)\n//           //   this.reconnect(this.socketUrl, this.connectSucceed)\n//         },\n//       )\n//     },\n//   },\n// }\n"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,kCAAnB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,SAASC,OAAT,QAAwB,WAAxB,C,CACA;AACA;AACA;;AACA,SAASC,SAAT,QAA0B,KAA1B;AACA,eAAe;EACbC,IAAI,EAAE,WADO;;EAEbC,KAAK,GAAG;IACN;IACAF,SAAS,CAAC,MAAM;MACf,MAAMG,SAAS,GAAG;QACfC,IAAI,GAAG;UACL,OAAO;YACLC,EAAE,EAAE;UADC,CAAP;QAGD,CALc;;QAMfC,OAAO,GAAG;UACR;UACA,KAAKC,aAAL;QACD,CATc;;QAUfC,SAAS,EAAE,YAAY;UACrB;UACA,KAAKC,cAAL;QACD,CAbc;QAcfC,OAAO,EAAE;UACP;UACAH,aAAa,GAAG;YACd,KAAKI,MAAL,GAAc,IAAId,MAAJ,CAAW,0BAAX,CAAd;YACA,KAAKe,WAAL,GAAmBd,KAAK,CAACe,IAAN,CAAW,KAAKF,MAAhB,CAAnB;YACA,KAAKC,WAAL,CAAiBE,OAAjB,EACE;YACCC,MAAD,IAAY;cACVA,MAAM;YACP,CAJH,EAKGC,KAAD,IAAW;cACTb,SAAS,CAACC,IAAV,GAAiBC,EAAjB,GAAsB,IAAtB;cACAY,OAAO,CAACC,GAAR,CAAYF,KAAZ;cACA,KAAKJ,WAAL,CAAiBO,SAAjB,CAA2B,aAA3B,EAA0C,UAAUf,IAAV,EAAgB;gBACxD,IAAIgB,SAAS,GAAG,EAAhB;;gBACA,IAAIrB,OAAO,CAACsB,YAAR,CAAqBC,KAArB,KAA+BC,SAAnC,EAA8C;kBAC5CH,SAAS,GAAGrB,OAAO,CAACsB,YAAR,CAAqBC,KAArB,CAA2BlB,IAAvC;gBACD;;gBACD,MAAMoB,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWtB,IAAI,CAACuB,IAAhB,CAApB;gBACA,IAAIC,MAAM,GAAG,KAAb;gBACAR,SAAS,CAACS,OAAV,CAAmBC,OAAD,IAAa;kBAC7B,IAAIA,OAAO,CAACC,OAAR,KAAoBP,WAAW,CAACO,OAApC,EAA6C;oBAC3CD,OAAO,CAAC1B,IAAR,CAAa4B,MAAb,CAAoBR,WAAW,CAACpB,IAAhC;oBACAwB,MAAM,GAAG,IAAT;kBACD;gBACF,CALD;;gBAMA,IAAI,CAACA,MAAL,EAAa;kBACXR,SAAS,CAACa,IAAV,CAAeT,WAAf;gBACD;;gBACDzB,OAAO,CAACsB,YAAR,CAAqBC,KAArB,GAA6BF,SAA7B;gBACAH,OAAO,CAACC,GAAR,CAAYnB,OAAO,CAACsB,YAAR,CAAqBC,KAAjC,EAjBwD,CAkBxD;cACD,CAnBD;cAoBA,KAAKV,WAAL,CAAiBsB,IAAjB,CACE,cADF,EAEE,EAFF,EAGET,IAAI,CAACU,SAAL,CAAe;gBAAEC,QAAQ,EAAE;cAAZ,CAAf,CAHF,EAvBS,CA4BT;YACD,CAlCH,EAmCGC,GAAD,IAAS;cACP,KAAK9B,aAAL,CADO,CAEP;;cACAU,OAAO,CAACC,GAAR,CAAYmB,GAAZ,EAHO,CAIP;YACD,CAxCH;UA0CD;;QA/CM;MAdM,CAAlB;IAgEA,CAjEQ,CAAT;EAkED;;AAtEY,CAAf,C,CAyEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}