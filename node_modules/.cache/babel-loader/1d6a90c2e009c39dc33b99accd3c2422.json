{"ast":null,"code":"import { useStore } from 'vuex';\nimport SockJS from 'sockjs-client/dist/sockjs.min.js';\nimport Stomp from 'webstomp-client'; // const websocketUrl = `wss://demo.piesocket.com/v3/channel_1?api_key=VCXCEuvhGcBDP7XhiJJUDvR1e1D3eiVjgZ9VRiaV&notify_self`;\n// const websocketUrl = `ws://127.0.0.1:8080/`\n\nexport default {\n  setup() {\n    const store = useStore();\n    const websocket = {\n      data() {\n        return {\n          ws: null\n        };\n      },\n\n      created() {\n        //頁面剛進入時開啟長連線\n        this.methods.initWebsocket();\n      },\n\n      destroyed: function () {\n        //頁面銷燬時關閉長連線\n        this.websocketclose();\n      },\n      methods: {\n        //初始websocket\n        initWebsocket() {\n          this.socket = new SockJS('http://localhost:8080/ws');\n          this.stompClient = Stomp.over(this.socket);\n          this.stompClient.connect( // headers头部信息。可添加客户端的认证信息。也可以不添加信息，headers 直接就设置为 {}\n          header => {\n            header;\n          }, frame => {\n            console.log(frame);\n            this.stompClient.subscribe('/topic/bind', function (data) {\n              if (store) {\n                console.log('aaaa' + data);\n                this.$store.state.currencyOrder = JSON.parse(data);\n              }\n\n              console.log(store);\n            }); //   this.connectSucceed()\n          }, err => {\n            this.initWebsocket; // 连接失败的回调\n\n            console.log(err); //   this.reconnect(this.socketUrl, this.connectSucceed)\n          });\n        },\n\n        websocketonopen() {\n          console.log('ws 連線成功~~');\n        },\n\n        websocketonerror(e) {\n          console.error('ws 連線失敗', e);\n        },\n\n        websocketonmessage(e) {\n          console.log(e.data);\n          store.currentOrder.push(e.data);\n          return e;\n        },\n\n        websocketsend(data, topic = '/submitOrder') {\n          this.stompClient.send('/app' + topic, data); //前端丟資料\n\n          console.log('send data', data);\n        },\n\n        websocketclose() {\n          console.log('ws 關閉連線');\n        }\n\n      }\n    };\n    return {\n      websocket\n    };\n  }\n\n}; // const store = useStore()\n// export const websocket = {\n//   data() {\n//     return {\n//       ws: null,\n//     }\n//   },\n//   created() {\n//     //頁面剛進入時開啟長連線\n//     this.methods.initWebsocket()\n//   },\n//   destroyed: function () {\n//     //頁面銷燬時關閉長連線\n//     this.websocketclose()\n//   },\n//   methods: {\n//     //初始websocket\n//     initWebsocket() {\n//       this.socket = new SockJS('http://localhost:8080/ws')\n//       this.stompClient = Stomp.over(this.socket)\n//       this.stompClient.connect(\n//         // headers头部信息。可添加客户端的认证信息。也可以不添加信息，headers 直接就设置为 {}\n//         (header) => {\n//           header\n//         },\n//         (frame) => {\n//           console.log(frame)\n//           this.stompClient.subscribe('/topic/bind', function (data) {\n//             if (store) {\n//               console.log('aaaa' + data)\n//               this.$store.state.currencyOrder = JSON.parse(data)\n//             }\n//             console.log(store)\n//           })\n//           //   this.connectSucceed()\n//         },\n//         (err) => {\n//           this.initWebsocket\n//           // 连接失败的回调\n//           console.log(err)\n//           //   this.reconnect(this.socketUrl, this.connectSucceed)\n//         },\n//       )\n//     },\n//     websocketonopen() {\n//       console.log('ws 連線成功~~')\n//     },\n//     websocketonerror(e) {\n//       console.error('ws 連線失敗', e)\n//     },\n//     websocketonmessage(e) {\n//       console.log(e.data)\n//       store.currentOrder.push(e.data)\n//       return e\n//     },\n//     websocketsend(data, topic = '/submitOrder') {\n//       this.stompClient.send('/app' + topic, data)\n//       //前端丟資料\n//       console.log('send data', data)\n//     },\n//     websocketclose() {\n//       console.log('ws 關閉連線')\n//     },\n//   },\n// }","map":{"version":3,"names":["useStore","SockJS","Stomp","setup","store","websocket","data","ws","created","methods","initWebsocket","destroyed","websocketclose","socket","stompClient","over","connect","header","frame","console","log","subscribe","$store","state","currencyOrder","JSON","parse","err","websocketonopen","websocketonerror","e","error","websocketonmessage","currentOrder","push","websocketsend","topic","send"],"sources":["C:/Users/user/Desktop/admin/coreui-free-vue-admin-template-main/coreui-free-vue-admin-template-main/src/websocket.js"],"sourcesContent":["import { useStore } from 'vuex'\nimport SockJS from 'sockjs-client/dist/sockjs.min.js'\nimport Stomp from 'webstomp-client'\n// const websocketUrl = `wss://demo.piesocket.com/v3/channel_1?api_key=VCXCEuvhGcBDP7XhiJJUDvR1e1D3eiVjgZ9VRiaV&notify_self`;\n// const websocketUrl = `ws://127.0.0.1:8080/`\nexport default {\n  setup () {\n    const store = useStore()\n    const websocket = {\n      data() {\n        return {\n          ws: null,\n        }\n      },\n      created() {\n        //頁面剛進入時開啟長連線\n        this.methods.initWebsocket()\n      },\n      destroyed: function () {\n        //頁面銷燬時關閉長連線\n        this.websocketclose()\n      },\n      methods: {\n        //初始websocket\n        initWebsocket() {\n          this.socket = new SockJS('http://localhost:8080/ws')\n          this.stompClient = Stomp.over(this.socket)\n          this.stompClient.connect(\n            // headers头部信息。可添加客户端的认证信息。也可以不添加信息，headers 直接就设置为 {}\n            (header) => {\n              header\n            },\n            (frame) => {\n              console.log(frame)\n              this.stompClient.subscribe('/topic/bind', function (data) {\n                if (store) {\n                  console.log('aaaa' + data)\n                  this.$store.state.currencyOrder = JSON.parse(data)\n                }\n                console.log(store)\n              })\n              //   this.connectSucceed()\n            },\n            (err) => {\n              this.initWebsocket\n              // 连接失败的回调\n              console.log(err)\n              //   this.reconnect(this.socketUrl, this.connectSucceed)\n            },\n          )\n        },\n        websocketonopen() {\n          console.log('ws 連線成功~~')\n        },\n        websocketonerror(e) {\n          console.error('ws 連線失敗', e)\n        },\n        websocketonmessage(e) {\n          console.log(e.data)\n          store.currentOrder.push(e.data)\n          return e\n        },\n        websocketsend(data, topic = '/submitOrder') {\n          this.stompClient.send('/app' + topic, data)\n          //前端丟資料\n          console.log('send data', data)\n        },\n        websocketclose() {\n          console.log('ws 關閉連線')\n        },\n      },\n    }\n    \n    return {\n      websocket\n    }\n  }\n}\n// const store = useStore()\n// export const websocket = {\n//   data() {\n//     return {\n//       ws: null,\n//     }\n//   },\n//   created() {\n//     //頁面剛進入時開啟長連線\n//     this.methods.initWebsocket()\n//   },\n//   destroyed: function () {\n//     //頁面銷燬時關閉長連線\n//     this.websocketclose()\n//   },\n//   methods: {\n//     //初始websocket\n//     initWebsocket() {\n//       this.socket = new SockJS('http://localhost:8080/ws')\n//       this.stompClient = Stomp.over(this.socket)\n//       this.stompClient.connect(\n//         // headers头部信息。可添加客户端的认证信息。也可以不添加信息，headers 直接就设置为 {}\n//         (header) => {\n//           header\n//         },\n//         (frame) => {\n//           console.log(frame)\n//           this.stompClient.subscribe('/topic/bind', function (data) {\n//             if (store) {\n//               console.log('aaaa' + data)\n//               this.$store.state.currencyOrder = JSON.parse(data)\n//             }\n//             console.log(store)\n//           })\n//           //   this.connectSucceed()\n//         },\n//         (err) => {\n//           this.initWebsocket\n//           // 连接失败的回调\n//           console.log(err)\n//           //   this.reconnect(this.socketUrl, this.connectSucceed)\n//         },\n//       )\n//     },\n//     websocketonopen() {\n//       console.log('ws 連線成功~~')\n//     },\n//     websocketonerror(e) {\n//       console.error('ws 連線失敗', e)\n//     },\n//     websocketonmessage(e) {\n//       console.log(e.data)\n//       store.currentOrder.push(e.data)\n//       return e\n//     },\n//     websocketsend(data, topic = '/submitOrder') {\n//       this.stompClient.send('/app' + topic, data)\n//       //前端丟資料\n//       console.log('send data', data)\n//     },\n//     websocketclose() {\n//       console.log('ws 關閉連線')\n//     },\n//   },\n// }\n"],"mappings":"AAAA,SAASA,QAAT,QAAyB,MAAzB;AACA,OAAOC,MAAP,MAAmB,kCAAnB;AACA,OAAOC,KAAP,MAAkB,iBAAlB,C,CACA;AACA;;AACA,eAAe;EACbC,KAAK,GAAI;IACP,MAAMC,KAAK,GAAGJ,QAAQ,EAAtB;IACA,MAAMK,SAAS,GAAG;MAChBC,IAAI,GAAG;QACL,OAAO;UACLC,EAAE,EAAE;QADC,CAAP;MAGD,CALe;;MAMhBC,OAAO,GAAG;QACR;QACA,KAAKC,OAAL,CAAaC,aAAb;MACD,CATe;;MAUhBC,SAAS,EAAE,YAAY;QACrB;QACA,KAAKC,cAAL;MACD,CAbe;MAchBH,OAAO,EAAE;QACP;QACAC,aAAa,GAAG;UACd,KAAKG,MAAL,GAAc,IAAIZ,MAAJ,CAAW,0BAAX,CAAd;UACA,KAAKa,WAAL,GAAmBZ,KAAK,CAACa,IAAN,CAAW,KAAKF,MAAhB,CAAnB;UACA,KAAKC,WAAL,CAAiBE,OAAjB,EACE;UACCC,MAAD,IAAY;YACVA,MAAM;UACP,CAJH,EAKGC,KAAD,IAAW;YACTC,OAAO,CAACC,GAAR,CAAYF,KAAZ;YACA,KAAKJ,WAAL,CAAiBO,SAAjB,CAA2B,aAA3B,EAA0C,UAAUf,IAAV,EAAgB;cACxD,IAAIF,KAAJ,EAAW;gBACTe,OAAO,CAACC,GAAR,CAAY,SAASd,IAArB;gBACA,KAAKgB,MAAL,CAAYC,KAAZ,CAAkBC,aAAlB,GAAkCC,IAAI,CAACC,KAAL,CAAWpB,IAAX,CAAlC;cACD;;cACDa,OAAO,CAACC,GAAR,CAAYhB,KAAZ;YACD,CAND,EAFS,CAST;UACD,CAfH,EAgBGuB,GAAD,IAAS;YACP,KAAKjB,aAAL,CADO,CAEP;;YACAS,OAAO,CAACC,GAAR,CAAYO,GAAZ,EAHO,CAIP;UACD,CArBH;QAuBD,CA5BM;;QA6BPC,eAAe,GAAG;UAChBT,OAAO,CAACC,GAAR,CAAY,WAAZ;QACD,CA/BM;;QAgCPS,gBAAgB,CAACC,CAAD,EAAI;UAClBX,OAAO,CAACY,KAAR,CAAc,SAAd,EAAyBD,CAAzB;QACD,CAlCM;;QAmCPE,kBAAkB,CAACF,CAAD,EAAI;UACpBX,OAAO,CAACC,GAAR,CAAYU,CAAC,CAACxB,IAAd;UACAF,KAAK,CAAC6B,YAAN,CAAmBC,IAAnB,CAAwBJ,CAAC,CAACxB,IAA1B;UACA,OAAOwB,CAAP;QACD,CAvCM;;QAwCPK,aAAa,CAAC7B,IAAD,EAAO8B,KAAK,GAAG,cAAf,EAA+B;UAC1C,KAAKtB,WAAL,CAAiBuB,IAAjB,CAAsB,SAASD,KAA/B,EAAsC9B,IAAtC,EAD0C,CAE1C;;UACAa,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBd,IAAzB;QACD,CA5CM;;QA6CPM,cAAc,GAAG;UACfO,OAAO,CAACC,GAAR,CAAY,SAAZ;QACD;;MA/CM;IAdO,CAAlB;IAiEA,OAAO;MACLf;IADK,CAAP;EAGD;;AAvEY,CAAf,C,CAyEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}