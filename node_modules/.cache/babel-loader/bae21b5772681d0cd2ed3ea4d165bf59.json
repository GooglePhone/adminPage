{"ast":null,"code":"import { useStore } from 'vuex';\nimport SockJS from 'sockjs-client/dist/sockjs.min.js';\nimport Stomp from 'webstomp-client'; // const websocketUrl = `wss://demo.piesocket.com/v3/channel_1?api_key=VCXCEuvhGcBDP7XhiJJUDvR1e1D3eiVjgZ9VRiaV&notify_self`;\n// const websocketUrl = `ws://127.0.0.1:8080/`\n\nconst store = useStore();\nvar socket = null;\nexport const connectSocket = () => {\n  socket = new WebSocket(wsUrl); // 這邊就是剛剛上面的process.env.VUE_APP_API_URL\n\n  const websocket = {\n    data() {\n      return {\n        ws: null\n      };\n    },\n\n    created() {\n      //頁面剛進入時開啟長連線\n      this.methods.initWebsocket();\n    },\n\n    destroyed: function () {\n      //頁面銷燬時關閉長連線\n      this.websocketclose();\n    },\n    methods: {\n      //初始websocket\n      initWebsocket() {\n        this.socket = new SockJS('http://localhost:8080/ws');\n        this.stompClient = Stomp.over(this.socket);\n        this.stompClient.connect( // headers头部信息。可添加客户端的认证信息。也可以不添加信息，headers 直接就设置为 {}\n        header => {\n          header;\n        }, frame => {\n          console.log(frame);\n          this.stompClient.subscribe('/topic/bind', function (data) {\n            if (store) {\n              console.log('aaaa' + data);\n              this.$store.commit('updateCurrencyOrder', data);\n            } // console.log('ddd' + data)\n\n          }); //   this.connectSucceed()\n        }, err => {\n          this.initWebsocket; // 连接失败的回调\n\n          console.log(err); //   this.reconnect(this.socketUrl, this.connectSucceed)\n        });\n      },\n\n      websocketonopen() {\n        console.log('ws 連線成功~~');\n      },\n\n      websocketonerror(e) {\n        console.error('ws 連線失敗', e);\n      },\n\n      websocketonmessage(e) {\n        console.log(e.data);\n        store.currentOrder.push(e.data);\n        return e;\n      },\n\n      websocketsend(data, topic = '/submitOrder') {\n        this.stompClient.send('/app' + topic, data); //前端丟資料\n\n        console.log('send data', data);\n      },\n\n      websocketclose() {\n        console.log('ws 關閉連線');\n      }\n\n    }\n  };\n\n  socket.onopen = function () {\n    //連線(onopen)\n    console.log(\"websocket connected!!\");\n  };\n\n  socket.onmessage = function (msg) {\n    //監聽訊息(onmessage)\n    console.log(\"onmessage\", msg);\n  };\n\n  socket.onerror = function (err) {\n    //監聽錯誤(onerror)\n    console.log(\"error\", err);\n  };\n}; // export const websocket = {\n//   data() {\n//     return {\n//       ws: null,\n//     }\n//   },\n//   created() {\n//     //頁面剛進入時開啟長連線\n//     this.methods.initWebsocket()\n//   },\n//   destroyed: function () {\n//     //頁面銷燬時關閉長連線\n//     this.websocketclose()\n//   },\n//   methods: {\n//     //初始websocket\n//     initWebsocket() {\n//       this.socket = new SockJS('http://localhost:8080/ws')\n//       this.stompClient = Stomp.over(this.socket)\n//       this.stompClient.connect(\n//         // headers头部信息。可添加客户端的认证信息。也可以不添加信息，headers 直接就设置为 {}\n//         (header) => {\n//           header\n//         },\n//         (frame) => {\n//           console.log(frame)\n//           this.stompClient.subscribe('/topic/bind', function (data) {\n//             if (store) {\n//               console.log('aaaa' + data)\n//               this.$store.commit('updateCurrencyOrder', data)\n//             }\n//             // console.log('ddd' + data)\n//           })\n//           //   this.connectSucceed()\n//         },\n//         (err) => {\n//           this.initWebsocket\n//           // 连接失败的回调\n//           console.log(err)\n//           //   this.reconnect(this.socketUrl, this.connectSucceed)\n//         },\n//       )\n//     },\n//     websocketonopen() {\n//       console.log('ws 連線成功~~')\n//     },\n//     websocketonerror(e) {\n//       console.error('ws 連線失敗', e)\n//     },\n//     websocketonmessage(e) {\n//       console.log(e.data)\n//       store.currentOrder.push(e.data)\n//       return e\n//     },\n//     websocketsend(data, topic = '/submitOrder') {\n//       this.stompClient.send('/app' + topic, data)\n//       //前端丟資料\n//       console.log('send data', data)\n//     },\n//     websocketclose() {\n//       console.log('ws 關閉連線')\n//     },\n//   },\n// }","map":{"version":3,"names":["useStore","SockJS","Stomp","store","socket","connectSocket","WebSocket","wsUrl","websocket","data","ws","created","methods","initWebsocket","destroyed","websocketclose","stompClient","over","connect","header","frame","console","log","subscribe","$store","commit","err","websocketonopen","websocketonerror","e","error","websocketonmessage","currentOrder","push","websocketsend","topic","send","onopen","onmessage","msg","onerror"],"sources":["C:/Users/user/Desktop/admin/coreui-free-vue-admin-template-main/coreui-free-vue-admin-template-main/src/websocket.js"],"sourcesContent":["import { useStore } from 'vuex'\nimport SockJS from 'sockjs-client/dist/sockjs.min.js'\nimport Stomp from 'webstomp-client'\n// const websocketUrl = `wss://demo.piesocket.com/v3/channel_1?api_key=VCXCEuvhGcBDP7XhiJJUDvR1e1D3eiVjgZ9VRiaV&notify_self`;\n// const websocketUrl = `ws://127.0.0.1:8080/`\nconst store = useStore()\nvar socket = null;\nexport const connectSocket = () => {  \n  socket = new WebSocket(wsUrl); // 這邊就是剛剛上面的process.env.VUE_APP_API_URL\n   const websocket = {\n    data() {\n      return {\n        ws: null,\n      }\n    },\n    created() {\n      //頁面剛進入時開啟長連線\n      this.methods.initWebsocket()\n    },\n    destroyed: function () {\n      //頁面銷燬時關閉長連線\n      this.websocketclose()\n    },\n    methods: {\n      //初始websocket\n      initWebsocket() {\n        this.socket = new SockJS('http://localhost:8080/ws')\n        this.stompClient = Stomp.over(this.socket)\n        this.stompClient.connect(\n          // headers头部信息。可添加客户端的认证信息。也可以不添加信息，headers 直接就设置为 {}\n          (header) => {\n            header\n          },\n          (frame) => {\n            console.log(frame)\n            this.stompClient.subscribe('/topic/bind', function (data) {\n              if (store) {\n                console.log('aaaa' + data)\n                this.$store.commit('updateCurrencyOrder', data)\n              }\n              // console.log('ddd' + data)\n            })\n            //   this.connectSucceed()\n          },\n          (err) => {\n            this.initWebsocket\n            // 连接失败的回调\n            console.log(err)\n            //   this.reconnect(this.socketUrl, this.connectSucceed)\n          },\n        )\n      },\n      websocketonopen() {\n        console.log('ws 連線成功~~')\n      },\n      websocketonerror(e) {\n        console.error('ws 連線失敗', e)\n      },\n      websocketonmessage(e) {\n        console.log(e.data)\n        store.currentOrder.push(e.data)\n        return e\n      },\n      websocketsend(data, topic = '/submitOrder') {\n        this.stompClient.send('/app' + topic, data)\n        //前端丟資料\n        console.log('send data', data)\n      },\n      websocketclose() {\n        console.log('ws 關閉連線')\n      },\n    },\n  }\n  socket.onopen = function() { //連線(onopen)\n    console.log(\"websocket connected!!\");\n  };\n  socket.onmessage = function(msg) { //監聽訊息(onmessage)\n    console.log(\"onmessage\", msg);\n  };\n  socket.onerror = function(err) { //監聽錯誤(onerror)\n    console.log(\"error\", err);\n  };\n};\n\n\n// export const websocket = {\n//   data() {\n//     return {\n//       ws: null,\n//     }\n//   },\n//   created() {\n//     //頁面剛進入時開啟長連線\n//     this.methods.initWebsocket()\n//   },\n//   destroyed: function () {\n//     //頁面銷燬時關閉長連線\n//     this.websocketclose()\n//   },\n//   methods: {\n//     //初始websocket\n//     initWebsocket() {\n//       this.socket = new SockJS('http://localhost:8080/ws')\n//       this.stompClient = Stomp.over(this.socket)\n//       this.stompClient.connect(\n//         // headers头部信息。可添加客户端的认证信息。也可以不添加信息，headers 直接就设置为 {}\n//         (header) => {\n//           header\n//         },\n//         (frame) => {\n//           console.log(frame)\n//           this.stompClient.subscribe('/topic/bind', function (data) {\n//             if (store) {\n//               console.log('aaaa' + data)\n//               this.$store.commit('updateCurrencyOrder', data)\n//             }\n//             // console.log('ddd' + data)\n//           })\n//           //   this.connectSucceed()\n//         },\n//         (err) => {\n//           this.initWebsocket\n//           // 连接失败的回调\n//           console.log(err)\n//           //   this.reconnect(this.socketUrl, this.connectSucceed)\n//         },\n//       )\n//     },\n//     websocketonopen() {\n//       console.log('ws 連線成功~~')\n//     },\n//     websocketonerror(e) {\n//       console.error('ws 連線失敗', e)\n//     },\n//     websocketonmessage(e) {\n//       console.log(e.data)\n//       store.currentOrder.push(e.data)\n//       return e\n//     },\n//     websocketsend(data, topic = '/submitOrder') {\n//       this.stompClient.send('/app' + topic, data)\n//       //前端丟資料\n//       console.log('send data', data)\n//     },\n//     websocketclose() {\n//       console.log('ws 關閉連線')\n//     },\n//   },\n// }\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}