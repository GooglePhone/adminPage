{"ast":null,"code":"import SockJS from 'sockjs-client/dist/sockjs.min.js';\nimport Stomp from 'webstomp-client';\nimport { mapMutations } from 'vuex'; // const websocketUrl = `wss://demo.piesocket.com/v3/channel_1?api_key=VCXCEuvhGcBDP7XhiJJUDvR1e1D3eiVjgZ9VRiaV&notify_self`;\n// const websocketUrl = `ws://127.0.0.1:8080/`\n\nexport const websocket = {\n  data() {\n    return {\n      ws: null\n    };\n  },\n\n  created() {\n    //頁面剛進入時開啟長連線\n    this.initWebsocket();\n  },\n\n  destroyed: function () {\n    //頁面銷燬時關閉長連線\n    this.websocketclose();\n  },\n  ...mapMutations(['updateCurrencyOrder']),\n  methods: {\n    //初始websocket\n    initWebsocket() {\n      this.socket = new SockJS('http://localhost:8080/ws');\n      this.stompClient = Stomp.over(this.socket);\n      this.stompClient.connect( // headers头部信息。可添加客户端的认证信息。也可以不添加信息，headers 直接就设置为 {}\n      header => {\n        header;\n      }, frame => {\n        console.log(frame);\n        this.stompClient.subscribe('/topic/bind', function (data) {\n          this.updateCurrencyOrder(data); // console.log('ddd' + data)\n        });\n        this.stompClient.send('/app/testMsg', {}, JSON.stringify({\n          clientId: 'jjj'\n        })); //   this.connectSucceed()\n      }, err => {\n        this.initWebsocket; // 连接失败的回调\n\n        console.log(err); //   this.reconnect(this.socketUrl, this.connectSucceed)\n      });\n    },\n\n    websocketonopen() {\n      console.log('ws 連線成功~~');\n    },\n\n    websocketonerror(e) {\n      console.error('ws 連線失敗', e);\n    },\n\n    websocketonmessage(e) {\n      console.log(e.data);\n      store.currentOrder.push(e.data);\n      return e;\n    },\n\n    websocketsend(data, topic = '/submitOrder') {\n      this.stompClient.send('/app' + topic, data); //前端丟資料\n\n      console.log('send data', data);\n    },\n\n    websocketclose() {\n      console.log('ws 關閉連線');\n    }\n\n  }\n};","map":{"version":3,"names":["SockJS","Stomp","mapMutations","websocket","data","ws","created","initWebsocket","destroyed","websocketclose","methods","socket","stompClient","over","connect","header","frame","console","log","subscribe","updateCurrencyOrder","send","JSON","stringify","clientId","err","websocketonopen","websocketonerror","e","error","websocketonmessage","store","currentOrder","push","websocketsend","topic"],"sources":["C:/Users/user/Desktop/admin/coreui-free-vue-admin-template-main/coreui-free-vue-admin-template-main/src/websocket.js"],"sourcesContent":["import SockJS from 'sockjs-client/dist/sockjs.min.js'\nimport Stomp from 'webstomp-client'\nimport { mapMutations } from 'vuex'\n// const websocketUrl = `wss://demo.piesocket.com/v3/channel_1?api_key=VCXCEuvhGcBDP7XhiJJUDvR1e1D3eiVjgZ9VRiaV&notify_self`;\n// const websocketUrl = `ws://127.0.0.1:8080/`\nexport const websocket = {\n  data() {\n    return {\n      ws: null,\n    }\n  },\n  created() {\n    //頁面剛進入時開啟長連線\n    this.initWebsocket()\n  },\n  destroyed: function () {\n    //頁面銷燬時關閉長連線\n    this.websocketclose()\n  },\n  ...mapMutations(['updateCurrencyOrder']),\n  methods: {\n    //初始websocket\n    initWebsocket() {\n      this.socket = new SockJS('http://localhost:8080/ws')\n      this.stompClient = Stomp.over(this.socket)\n      this.stompClient.connect(\n        // headers头部信息。可添加客户端的认证信息。也可以不添加信息，headers 直接就设置为 {}\n        (header) => {\n          header\n        },\n        (frame) => {\n          console.log(frame)\n          this.stompClient.subscribe('/topic/bind', function (data) {\n            this.updateCurrencyOrder(data)\n            // console.log('ddd' + data)\n          })\n          this.stompClient.send(\n            '/app/testMsg',\n            {},\n            JSON.stringify({ clientId: 'jjj' }),\n          )\n          //   this.connectSucceed()\n        },\n        (err) => {\n          this.initWebsocket\n          // 连接失败的回调\n          console.log(err)\n          //   this.reconnect(this.socketUrl, this.connectSucceed)\n        },\n      )\n    },\n    websocketonopen() {\n      console.log('ws 連線成功~~')\n    },\n    websocketonerror(e) {\n      console.error('ws 連線失敗', e)\n    },\n    websocketonmessage(e) {\n      console.log(e.data)\n      store.currentOrder.push(e.data)\n      return e\n    },\n    websocketsend(data, topic = '/submitOrder') {\n      this.stompClient.send('/app' + topic, data)\n      //前端丟資料\n      console.log('send data', data)\n    },\n    websocketclose() {\n      console.log('ws 關閉連線')\n    },\n  },\n}\n"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,kCAAnB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,SAASC,YAAT,QAA6B,MAA7B,C,CACA;AACA;;AACA,OAAO,MAAMC,SAAS,GAAG;EACvBC,IAAI,GAAG;IACL,OAAO;MACLC,EAAE,EAAE;IADC,CAAP;EAGD,CALsB;;EAMvBC,OAAO,GAAG;IACR;IACA,KAAKC,aAAL;EACD,CATsB;;EAUvBC,SAAS,EAAE,YAAY;IACrB;IACA,KAAKC,cAAL;EACD,CAbsB;EAcvB,GAAGP,YAAY,CAAC,CAAC,qBAAD,CAAD,CAdQ;EAevBQ,OAAO,EAAE;IACP;IACAH,aAAa,GAAG;MACd,KAAKI,MAAL,GAAc,IAAIX,MAAJ,CAAW,0BAAX,CAAd;MACA,KAAKY,WAAL,GAAmBX,KAAK,CAACY,IAAN,CAAW,KAAKF,MAAhB,CAAnB;MACA,KAAKC,WAAL,CAAiBE,OAAjB,EACE;MACCC,MAAD,IAAY;QACVA,MAAM;MACP,CAJH,EAKGC,KAAD,IAAW;QACTC,OAAO,CAACC,GAAR,CAAYF,KAAZ;QACA,KAAKJ,WAAL,CAAiBO,SAAjB,CAA2B,aAA3B,EAA0C,UAAUf,IAAV,EAAgB;UACxD,KAAKgB,mBAAL,CAAyBhB,IAAzB,EADwD,CAExD;QACD,CAHD;QAIA,KAAKQ,WAAL,CAAiBS,IAAjB,CACE,cADF,EAEE,EAFF,EAGEC,IAAI,CAACC,SAAL,CAAe;UAAEC,QAAQ,EAAE;QAAZ,CAAf,CAHF,EANS,CAWT;MACD,CAjBH,EAkBGC,GAAD,IAAS;QACP,KAAKlB,aAAL,CADO,CAEP;;QACAU,OAAO,CAACC,GAAR,CAAYO,GAAZ,EAHO,CAIP;MACD,CAvBH;IAyBD,CA9BM;;IA+BPC,eAAe,GAAG;MAChBT,OAAO,CAACC,GAAR,CAAY,WAAZ;IACD,CAjCM;;IAkCPS,gBAAgB,CAACC,CAAD,EAAI;MAClBX,OAAO,CAACY,KAAR,CAAc,SAAd,EAAyBD,CAAzB;IACD,CApCM;;IAqCPE,kBAAkB,CAACF,CAAD,EAAI;MACpBX,OAAO,CAACC,GAAR,CAAYU,CAAC,CAACxB,IAAd;MACA2B,KAAK,CAACC,YAAN,CAAmBC,IAAnB,CAAwBL,CAAC,CAACxB,IAA1B;MACA,OAAOwB,CAAP;IACD,CAzCM;;IA0CPM,aAAa,CAAC9B,IAAD,EAAO+B,KAAK,GAAG,cAAf,EAA+B;MAC1C,KAAKvB,WAAL,CAAiBS,IAAjB,CAAsB,SAASc,KAA/B,EAAsC/B,IAAtC,EAD0C,CAE1C;;MACAa,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBd,IAAzB;IACD,CA9CM;;IA+CPK,cAAc,GAAG;MACfQ,OAAO,CAACC,GAAR,CAAY,SAAZ;IACD;;EAjDM;AAfc,CAAlB"},"metadata":{},"sourceType":"module"}