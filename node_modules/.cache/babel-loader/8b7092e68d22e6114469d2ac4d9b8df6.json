{"ast":null,"code":"import { useStore } from 'vuex';\nimport SockJS from 'sockjs-client/dist/sockjs.min.js';\nimport Stomp from 'webstomp-client'; // const websocketUrl = `wss://demo.piesocket.com/v3/channel_1?api_key=VCXCEuvhGcBDP7XhiJJUDvR1e1D3eiVjgZ9VRiaV&notify_self`;\n// const websocketUrl = `ws://127.0.0.1:8080/`\n\nconst store = useStore();\nexport const connectSocket = () => {\n  socket = new WebSocket(wsUrl); // 這邊就是剛剛上面的process.env.VUE_APP_API_URL\n\n  socket.onopen = function () {\n    //連線(onopen)\n    console.log(\"websocket connected!!\");\n  };\n\n  socket.onmessage = function (msg) {\n    //監聽訊息(onmessage)\n    console.log(\"onmessage\", msg);\n  };\n\n  socket.onerror = function (err) {\n    //監聽錯誤(onerror)\n    console.log(\"error\", err);\n  };\n};\nexport const websocket = {\n  data() {\n    return {\n      ws: null\n    };\n  },\n\n  created() {\n    //頁面剛進入時開啟長連線\n    this.methods.initWebsocket();\n  },\n\n  destroyed: function () {\n    //頁面銷燬時關閉長連線\n    this.websocketclose();\n  },\n  methods: {\n    //初始websocket\n    initWebsocket() {\n      this.socket = new SockJS('http://localhost:8080/ws');\n      this.stompClient = Stomp.over(this.socket);\n      this.stompClient.connect( // headers头部信息。可添加客户端的认证信息。也可以不添加信息，headers 直接就设置为 {}\n      header => {\n        header;\n      }, frame => {\n        console.log(frame);\n        this.stompClient.subscribe('/topic/bind', function (data) {\n          if (store) {\n            console.log('aaaa' + data);\n            this.$store.commit('updateCurrencyOrder', data);\n          } // console.log('ddd' + data)\n\n        }); //   this.connectSucceed()\n      }, err => {\n        this.initWebsocket; // 连接失败的回调\n\n        console.log(err); //   this.reconnect(this.socketUrl, this.connectSucceed)\n      });\n    },\n\n    websocketonopen() {\n      console.log('ws 連線成功~~');\n    },\n\n    websocketonerror(e) {\n      console.error('ws 連線失敗', e);\n    },\n\n    websocketonmessage(e) {\n      console.log(e.data);\n      store.currentOrder.push(e.data);\n      return e;\n    },\n\n    websocketsend(data, topic = '/submitOrder') {\n      this.stompClient.send('/app' + topic, data); //前端丟資料\n\n      console.log('send data', data);\n    },\n\n    websocketclose() {\n      console.log('ws 關閉連線');\n    }\n\n  }\n};","map":{"version":3,"names":["useStore","SockJS","Stomp","store","connectSocket","socket","WebSocket","wsUrl","onopen","console","log","onmessage","msg","onerror","err","websocket","data","ws","created","methods","initWebsocket","destroyed","websocketclose","stompClient","over","connect","header","frame","subscribe","$store","commit","websocketonopen","websocketonerror","e","error","websocketonmessage","currentOrder","push","websocketsend","topic","send"],"sources":["C:/Users/user/Desktop/admin/coreui-free-vue-admin-template-main/coreui-free-vue-admin-template-main/src/websocket.js"],"sourcesContent":["import { useStore } from 'vuex'\nimport SockJS from 'sockjs-client/dist/sockjs.min.js'\nimport Stomp from 'webstomp-client'\n// const websocketUrl = `wss://demo.piesocket.com/v3/channel_1?api_key=VCXCEuvhGcBDP7XhiJJUDvR1e1D3eiVjgZ9VRiaV&notify_self`;\n// const websocketUrl = `ws://127.0.0.1:8080/`\nconst store = useStore()\n\nexport const connectSocket = () => {  \n  socket = new WebSocket(wsUrl); // 這邊就是剛剛上面的process.env.VUE_APP_API_URL\n\n  socket.onopen = function() { //連線(onopen)\n    console.log(\"websocket connected!!\");\n  };\n  socket.onmessage = function(msg) { //監聽訊息(onmessage)\n    console.log(\"onmessage\", msg);\n  };\n  socket.onerror = function(err) { //監聽錯誤(onerror)\n    console.log(\"error\", err);\n  };\n};\n\n\nexport const websocket = {\n  data() {\n    return {\n      ws: null,\n    }\n  },\n  created() {\n    //頁面剛進入時開啟長連線\n    this.methods.initWebsocket()\n  },\n  destroyed: function () {\n    //頁面銷燬時關閉長連線\n    this.websocketclose()\n  },\n  methods: {\n    //初始websocket\n    initWebsocket() {\n      this.socket = new SockJS('http://localhost:8080/ws')\n      this.stompClient = Stomp.over(this.socket)\n      this.stompClient.connect(\n        // headers头部信息。可添加客户端的认证信息。也可以不添加信息，headers 直接就设置为 {}\n        (header) => {\n          header\n        },\n        (frame) => {\n          console.log(frame)\n          this.stompClient.subscribe('/topic/bind', function (data) {\n            if (store) {\n              console.log('aaaa' + data)\n              this.$store.commit('updateCurrencyOrder', data)\n            }\n            // console.log('ddd' + data)\n          })\n          //   this.connectSucceed()\n        },\n        (err) => {\n          this.initWebsocket\n          // 连接失败的回调\n          console.log(err)\n          //   this.reconnect(this.socketUrl, this.connectSucceed)\n        },\n      )\n    },\n    websocketonopen() {\n      console.log('ws 連線成功~~')\n    },\n    websocketonerror(e) {\n      console.error('ws 連線失敗', e)\n    },\n    websocketonmessage(e) {\n      console.log(e.data)\n      store.currentOrder.push(e.data)\n      return e\n    },\n    websocketsend(data, topic = '/submitOrder') {\n      this.stompClient.send('/app' + topic, data)\n      //前端丟資料\n      console.log('send data', data)\n    },\n    websocketclose() {\n      console.log('ws 關閉連線')\n    },\n  },\n}\n"],"mappings":"AAAA,SAASA,QAAT,QAAyB,MAAzB;AACA,OAAOC,MAAP,MAAmB,kCAAnB;AACA,OAAOC,KAAP,MAAkB,iBAAlB,C,CACA;AACA;;AACA,MAAMC,KAAK,GAAGH,QAAQ,EAAtB;AAEA,OAAO,MAAMI,aAAa,GAAG,MAAM;EACjCC,MAAM,GAAG,IAAIC,SAAJ,CAAcC,KAAd,CAAT,CADiC,CACF;;EAE/BF,MAAM,CAACG,MAAP,GAAgB,YAAW;IAAE;IAC3BC,OAAO,CAACC,GAAR,CAAY,uBAAZ;EACD,CAFD;;EAGAL,MAAM,CAACM,SAAP,GAAmB,UAASC,GAAT,EAAc;IAAE;IACjCH,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBE,GAAzB;EACD,CAFD;;EAGAP,MAAM,CAACQ,OAAP,GAAiB,UAASC,GAAT,EAAc;IAAE;IAC/BL,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBI,GAArB;EACD,CAFD;AAGD,CAZM;AAeP,OAAO,MAAMC,SAAS,GAAG;EACvBC,IAAI,GAAG;IACL,OAAO;MACLC,EAAE,EAAE;IADC,CAAP;EAGD,CALsB;;EAMvBC,OAAO,GAAG;IACR;IACA,KAAKC,OAAL,CAAaC,aAAb;EACD,CATsB;;EAUvBC,SAAS,EAAE,YAAY;IACrB;IACA,KAAKC,cAAL;EACD,CAbsB;EAcvBH,OAAO,EAAE;IACP;IACAC,aAAa,GAAG;MACd,KAAKf,MAAL,GAAc,IAAIJ,MAAJ,CAAW,0BAAX,CAAd;MACA,KAAKsB,WAAL,GAAmBrB,KAAK,CAACsB,IAAN,CAAW,KAAKnB,MAAhB,CAAnB;MACA,KAAKkB,WAAL,CAAiBE,OAAjB,EACE;MACCC,MAAD,IAAY;QACVA,MAAM;MACP,CAJH,EAKGC,KAAD,IAAW;QACTlB,OAAO,CAACC,GAAR,CAAYiB,KAAZ;QACA,KAAKJ,WAAL,CAAiBK,SAAjB,CAA2B,aAA3B,EAA0C,UAAUZ,IAAV,EAAgB;UACxD,IAAIb,KAAJ,EAAW;YACTM,OAAO,CAACC,GAAR,CAAY,SAASM,IAArB;YACA,KAAKa,MAAL,CAAYC,MAAZ,CAAmB,qBAAnB,EAA0Cd,IAA1C;UACD,CAJuD,CAKxD;;QACD,CAND,EAFS,CAST;MACD,CAfH,EAgBGF,GAAD,IAAS;QACP,KAAKM,aAAL,CADO,CAEP;;QACAX,OAAO,CAACC,GAAR,CAAYI,GAAZ,EAHO,CAIP;MACD,CArBH;IAuBD,CA5BM;;IA6BPiB,eAAe,GAAG;MAChBtB,OAAO,CAACC,GAAR,CAAY,WAAZ;IACD,CA/BM;;IAgCPsB,gBAAgB,CAACC,CAAD,EAAI;MAClBxB,OAAO,CAACyB,KAAR,CAAc,SAAd,EAAyBD,CAAzB;IACD,CAlCM;;IAmCPE,kBAAkB,CAACF,CAAD,EAAI;MACpBxB,OAAO,CAACC,GAAR,CAAYuB,CAAC,CAACjB,IAAd;MACAb,KAAK,CAACiC,YAAN,CAAmBC,IAAnB,CAAwBJ,CAAC,CAACjB,IAA1B;MACA,OAAOiB,CAAP;IACD,CAvCM;;IAwCPK,aAAa,CAACtB,IAAD,EAAOuB,KAAK,GAAG,cAAf,EAA+B;MAC1C,KAAKhB,WAAL,CAAiBiB,IAAjB,CAAsB,SAASD,KAA/B,EAAsCvB,IAAtC,EAD0C,CAE1C;;MACAP,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBM,IAAzB;IACD,CA5CM;;IA6CPM,cAAc,GAAG;MACfb,OAAO,CAACC,GAAR,CAAY,SAAZ;IACD;;EA/CM;AAdc,CAAlB"},"metadata":{},"sourceType":"module"}